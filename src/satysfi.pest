// vim: fdm=marker

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "%" ~ (!("\r" | "\n") ~ ANY)* ~ ("\r" | "\n") }

program = _{ SOI ~ header_stage? ~ header* ~ (preamble ~ "in")? ~ expr ~ EOI }

// header {{{

header_stage = @{
    "@stage:"
    ~ (" " | "\t")* ~ stage
    ~ (" " | "\t")* ~ ("\r" | "\n")
}
stage = !{ "0" | "1" | "persistent" }
header = @{
    "@" ~ header_kind ~ ":"
    ~ (" " | "\t")* ~ pkgname ~ ("\r" | "\n")
}
header_kind = !{ "require" | "import" }
pkgname = ${ (!("\r" | "\n") ~ ANY)+ }

// }}}

// statement {{{

preamble = _{ (
    let_stmt
    | let_inline_stmt
    | let_block_stmt
    | module_stmt
)+ }
let_stmt = { "let" ~ pattern ~ stmt_argument? ~ "=" ~ expr }
let_inline_stmt = {
    "let-inline" ~
    ((inline_cmd_name ~ (pattern)*)
     | (var ~ inline_cmd_name ~ (arg)*))
    ~ "=" ~ expr
}
let_block_stmt = {
    "let-block" ~
    ((block_cmd_name ~ (pattern)*)
     | (var ~ block_cmd_name ~ (arg)*))
    ~ "=" ~ expr
}

stmt_argument = {
    // ":" ~ type_expr
    "|"? ~ (arg)+
}

arg = { pattern | "?:" ~ var_ptn }

// }}}

// module {{{

module_stmt = {
    "module" ~ module_name ~ (":" ~ sig_stmt)? ~ "=" ~ struct_stmt
}
sig_stmt = { "sig" ~ sig_inner? ~ "end" }
struct_stmt = { "struct" ~ struct_inner? ~ "end" }
sig_inner = {
    (sig_type_stmt
     | sig_val_stmt
     | sig_direct_stmt)+
}
sig_type_stmt = { "type" ~ type_param* ~ var ~ constraint* }
sig_val_stmt = {
    "val" ~
    (var | "(" ~ bin_operator ~ ")" | inline_cmd_name | block_cmd_name)
    ~ ":" ~ type_expr ~ constraint*
}
sig_direct_stmt = {
    "direct" ~
    ( inline_cmd_name | block_cmd_name)
    ~ ":" ~ type_expr ~ constraint*
}
struct_inner = _{ preamble }

// }}}

// types {{{

type_expr = {
    (type_optional_name ~ "?->")* ~ (type_prod ~ "->")* ~ type_prod
}
type_optional_name = _{type_prod}
type_prod = {
    type_unary ~ ("*" ~ type_unary)*
}
type_unary = {
      type_list ~ "inline-cmd"
    | type_list ~ "block-cmd"
    | type_list ~ "math-cmd"
    | "(" ~ type_expr ~ ")"
    | type_record
    | type_application
    | type_param
    | type_name
}
type_application = { type_application_unit ~ type_application_unit+ }
type_application_unit = {
    "(" ~ type_expr ~ ")"
    | type_param
    | type_name
}
type_name = _{ var | modvar }
type_list = {
    "[" ~ "]"
    | "[" ~ type_list_unit ~ (";" ~ type_list_unit)* ~ ";"? ~ "]"
}
type_list_unit = _{ type_prod ~ "?" | type_expr }
type_record = {
    ("(" ~ "|" ~ "|" ~ ")")
    | ("(" ~ "|" ~ type_record_inner ~ "|" ~ ")")
}
type_record_inner = _{ type_record_unit ~ (";" ~ type_record_unit)* ~ ";"? }
type_record_unit = { var ~ ":" ~ type_expr }

type_param = @{ "'" ~ var_ptn }

constraint = { "constraint" ~ type_param ~ "::" ~ type_record }

// }}}

// pattern {{{

// let や match 式の左辺に来るもの．
match_ptn = {
    pattern ~ "as" ~ var
    | pattern ~ "::" ~ match_ptn
    | pat_variant
    | pattern
}

pattern = {
    pat_list
    | "(" ~ match_ptn ~ ")"
    | pat_tuple
    | "_"
    | var
    | constant
}
pat_variant = { variant_name ~ pattern?  }
pat_list = {
    "[" ~ "]"
    | "[" ~ match_ptn ~ (";" ~ match_ptn)* ~ ";"? ~ "]"
}
pat_tuple = {
    "(" ~ match_ptn ~ ("," ~ match_ptn)+ ~ ")"
}

// }}}

// expr {{{

expr = {
    match_expr
    | bind_stmt ~ expr
    | ctrl_flow
    | dyadic_expr
    | unary_operator_expr
    | variant_constructor
    | application
    | record_member
    | unary
}

match_expr = {
    "match" ~ expr ~ "with" ~ "|"?
    ~ (match_arm ~ "|")* ~ match_arm
}
match_arm = {
    match_ptn ~ "when" ~ (!match_expr ~ expr) ~ "->" ~ (!match_expr ~ expr)
    | match_ptn ~ "->" ~ (!match_expr ~ expr)
}

ctrl_flow = _{
    ctrl_while
    | ctrl_if
}
ctrl_while = {
    "while" ~ expr ~ "do" ~ expr
}
ctrl_if = {
    "if" ~ expr
    ~ "then" ~ expr
    ~ "else" ~ expr
}


application = {  // 関数適用
    (var | modvar) ~ (
            "?:" ~ unary
            | "?*"
            | unary
    )+
    | "command" ~ inline_cmd_name
}

unary = {  // 1つの項として扱えるもの．
    block_text
    | horizontal_text
    | math_text
    | record
    | list
    | tuple
    | "(" ~ bin_operator ~ ")"
    | "(" ~ expr ~ ")"
    | var
    | modvar
    | expr_with_mod
    | constant
}
unary_operator_expr = {
    unary_operator ~ (application | record_member | unary)
}
unary_operator = { "-" | "not" }

variant_constructor = {
    variant_name ~ unary?
}

record_member = { unary ~ "#" ~ var }

tuple = {
    // () や (expr) は tuple 型にはならないので含めない
    "(" ~ expr ~ ("," ~ expr)+ ~ ")"
}

list = {
    "[" ~ "]"
    | "[" ~ expr ~ (";" ~ expr)* ~ ";"? ~ "]"
}

record = {
    "(" ~ "|" ~ "|" ~ ")"
    | "(" ~ "|" ~ unary ~ "with" ~ record_inner ~ "|" ~ ")"
    | "(" ~ "|" ~ record_inner ~ "|" ~ ")"
}
record_inner = { record_unit ~ (";" ~ record_unit)* ~ ";"? }
record_unit = { var_ptn ~ "=" ~ expr }

var = @{
    !(reserved_word ~ !(ASCII_ALPHANUMERIC | "-"))  // 予約語は変数名にならない
    ~ var_ptn
}
var_ptn = @{ ASCII_ALPHA_LOWER ~ (ASCII_ALPHANUMERIC | "-")* }
module_name = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "-")* }
variant_name = _{ module_name }
modvar = @{ module_name ~ "." ~ var_ptn }
expr_with_mod = { expr_with_mod_begin ~ expr ~ ")" }
    expr_with_mod_begin = @{ module_name ~ ".(" }

reserved_word = {
    // 文字数の多いものから順に書いていくこと
    "constraint"
    | "inline-cmd"
    | "block-cmd"
    | "math-cmd"
    | "let-mutable"
    | "let-inline"
    | "let-block"
    | "let-math"
    | "let-rec"
    | "controls"
    | "command"
    | "before"
    | "module"
    | "direct"
    | "struct"
    | "cycle"
    | "match"
    | "while"
    | "false"
    | "else"
    | "open"
    | "then"
    | "true"
    | "type"
    | "when"
    | "with"
    | "and"
    | "end"
    | "fun"
    | "let"
    | "mod"
    | "not"
    | "sig"
    | "val"
    | "as"
    | "do"
    | "if"
    | "in"
    | "of"
}

block_text = { "'<" ~ vertical_mode ~ ">" }
horizontal_text = { "{" ~ horizontal_mode ~ "}" }
math_text = {"${" ~ math_mode ~ "}"}

dyadic_expr = {
    (unary_operator_expr | variant_constructor | application | unary)
    ~ bin_operator
    ~ (dyadic_expr | unary_operator_expr | variant_constructor | application | unary)
}

bin_operator = @{
    bin_operator_start ~ bin_operator_succ*
    | "::"  // cons
    | "mod"
}
    bin_operator_start = @{ "-" | "+" | "*" | "/" | "^" | "&" | "|" | "=" | "<" | ">" }
    bin_operator_succ = @{
        "-" | "+" | "*" | "/" | "^" | "&" | "|" | "=" | "<" | ">"
        | "!" | ":" | "~" | "'" | "." | "?"
    }

bind_stmt = _{ let_in_stmt }
let_in_stmt = { let_stmt ~ "in" }

// }}}

// constants {{{

constant = _{
    unit_const
    | bool_const
    | string_const
    | length_const
    | float_const  // length の最初にマッチしうるので注意
    | int_const  // float の最初にマッチしうるので注意
}

unit_const = { "(" ~ ")" }
bool_const = { "true" | "false" }

int_decimal_const = _{ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* | "0" }

int_const = @{ "0" ~ ("x" | "X") ~ ASCII_HEX_DIGIT+ | int_decimal_const }
float_const = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* | "." ~ ASCII_DIGIT+ }
length_const = @{ length_digit ~ length_unit }
length_digit = _{ (float_const | int_decimal_const) }
length_unit = { ASCII_ALPHA_LOWER ~ (ASCII_ALPHANUMERIC | "-")* }

string_const = @{
    string_omit_space_identifier?
    ~ PUSH("`"+) ~ string_interior ~ POP
    ~ string_omit_space_identifier?
}
string_omit_space_identifier = {"#"}
string_interior = { (!PEEK ~ ANY)* }

// }}}

// horizontal {{{

horizontal_mode = _{
    horizontal_list
    | horizontal_bullet_list
    | horizontal_single
}
horizontal_single = { horizontal_token* }
horizontal_list = { "|" ~ (horizontal_single ~ "|")+ }
horizontal_bullet_list = { ("*"+ ~ horizontal_single)+ }

horizontal_token = ${
    string_const
    | inline_cmd
    | horizontal_text_embedding
    | "${" ~ math_mode ~ "}"
    | "\\" ~ horizontal_special_char
    | (!horizontal_special_char ~ ANY)+
}
horizontal_special_char = @{
    "@" | "`" | "\\" | "{" | "}" | "%" | "|" | "*" | "$" | "#" | ";"
}

inline_cmd_name = @{ "\\" ~ (var_ptn | modvar) }
inline_cmd = {
    inline_cmd_name
    ~ (cmd_expr_arg | cmd_expr_option)*
    ~ (";" | (cmd_text_arg)+)
}
cmd_expr_arg = !{
    "(" ~ ")"
    | "(" ~ expr ~ ")"
    | list
    | record
}
cmd_expr_option = { "?:" ~ cmd_expr_arg | "?*" }
cmd_text_arg = !{
    "<" ~ vertical_mode ~ ">"
    | "{" ~ horizontal_mode ~ "}"
}
horizontal_text_embedding = ${ "#" ~ (var_ptn | modvar) ~ ";" }

// }}}

// vertical {{{

vertical_mode = _{ (block_cmd | block_text_embedding)* }
block_cmd_name = @{ "+" ~ (var_ptn | modvar) }
block_cmd = {
    block_cmd_name
    ~ (cmd_expr_arg | cmd_expr_option)*
    ~ (";" | (cmd_text_arg)+)
}
block_text_embedding = @{ "#" ~ (var_ptn | modvar) ~ ";" }

// }}}

// math {{{

math_mode = !{
    math_list
    | math_single
}
math_single = { math_token* }
math_list = { "|" ~ (math_single ~ "|")+ }

math_token = _{
    math_unary ~ "^" ~ math_group ~ "_" ~ math_group
    | math_unary ~ "_" ~ math_group ~ "^" ~ math_group
    | math_unary ~ "^" ~ math_group
    | math_unary ~ "_" ~ math_group
    | math_unary
}

math_group = { "{" ~ math_single ~ "}" | math_unary }
math_unary = ${
    ASCII_ALPHANUMERIC
    | "\\" ~ math_special_char
    | math_symbol
    | math_cmd
}
math_cmd = {
    math_cmd_name
    ~ (math_cmd_expr_arg | math_cmd_expr_option)*
}
math_special_char = {
    " " | "!" | "\"" | "#" | "$" | "%" | "&" | "'"
        | "(" | ")" | "*" | "+" | "," | "-" | "." | "/"
        | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"
        | "8" | "9" | ":" | ";" | "<" | "=" | ">" | "?"
        | "@" | "[" | "\\" | "]" | "^" | "_"
        | "`" | "{" | "|" | "}" | "~"
}
math_symbol = {
    ("-" | "+" | "*" | "/" | ":" | "=" | "<"
     | ">" | "~" | "'" | "." | "," | "?" | "`")+
}
math_cmd_name = _{ inline_cmd_name }
math_cmd_expr_arg = !{
    "{" ~ math_mode ~ "}"
    | "!{" ~ horizontal_mode ~ "}"
    | "!<" ~ vertical_mode ~ ">"
    | "!(" ~ expr ~ ")"
    | math_cmd_list_arg
    | math_cmd_record_arg
}
math_cmd_list_arg = {
    "![" ~ "]"
    | "![" ~ expr ~ (";" ~ expr)* ~ ";"? ~ "]"
}
math_cmd_record_arg = {
    "!(" ~ "|" ~ "|" ~ ")"
    | "!(" ~ "|" ~ unary ~ "with" ~ record_inner ~ "|" ~ ")"
    | "!(" ~ "|" ~ record_inner ~ "|" ~ ")"
}
math_cmd_expr_option = { "?:" ~ math_cmd_expr_arg }

// }}}
